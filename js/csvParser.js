// js/csvParser.js
class CSVParser {
    static parse(csv) {
        console.log("üîÑ Iniciando parseo de CSV...");
        
        try {
            if (!csv || typeof csv !== 'string') {
                throw new Error('El contenido CSV est√° vac√≠o o no es v√°lido');
            }

            // Limpiar BOM y corregir codificaci√≥n de caracteres
            let cleanedCSV = csv.replace(/^\uFEFF/, ''); // Remover BOM UTF-8
            
            // Corregir caracteres mal codificados comunes
            cleanedCSV = this.fixEncoding(cleanedCSV);
            
            const lines = cleanedCSV.split(/\r?\n/)
                .filter(line => line.trim() !== '');

            if (lines.length < 2) {
                throw new Error('El CSV debe tener al menos una fila de encabezados y una de datos');
            }

            // Procesar encabezados
            const headers = lines[0].split(';').map(h => h.trim().replace(/"/g, ''));
            console.log("üìã Encabezados encontrados:", headers);

            // Validar columnas requeridas
            const missingColumns = CONFIG.REQUIRED_COLUMNS.filter(col => !headers.includes(col));
            if (missingColumns.length > 0) {
                console.warn(`‚ö†Ô∏è Columnas faltantes: ${missingColumns.join(', ')}`);
                NotificationManager.show(
                    `Algunas columnas esperadas no est√°n presentes: ${missingColumns.join(', ')}`,
                    'warning'
                );
            }

            // Procesar datos
            const data = [];
            for (let i = 1; i < lines.length; i++) {
                try {
                    const values = lines[i].split(';').map(v => {
                        // Limpiar y corregir codificaci√≥n de cada valor
                        let cleanValue = v.trim().replace(/"/g, '');
                        cleanValue = this.fixEncoding(cleanValue);
                        return cleanValue;
                    });
                    
                    const obj = {};
                    
                    headers.forEach((header, index) => {
                        obj[header] = values[index] || '';
                    });

                    // Debug: mostrar el primer registro procesado
                    if (i === 1) {
                        console.log("üîç Debug - Primer registro procesado:", obj);
                    }

                    // Validar que tenga al menos un identificador
                    if (this.getIndicatorName(obj) !== CONFIG.FALLBACK_VALUES.indicatorName) {
                        data.push(obj);
                    }
                } catch (error) {
                    console.error(`‚ùå Error procesando fila ${i + 1}:`, error);
                }
            }

            console.log(`‚úÖ CSV parseado exitosamente. ${data.length} registros v√°lidos`);
            return data;

        } catch (error) {
            console.error('üí• Error cr√≠tico en parseCSV:', error);
            NotificationManager.show(
                `Error al procesar el archivo CSV: ${error.message}`,
                'error'
            );
            return [];
        }
    }

    /**
     * Corrige problemas de codificaci√≥n de caracteres
     */
    static fixEncoding(text) {
        if (typeof text !== 'string') return text;
        
        // Mapa de caracteres mal codificados a caracteres correctos
        const encodingMap = {
            // Vocales con tilde
            '√É¬°': '√°', '√É¬©': '√©', '√É¬≠': '√≠', '√É¬≥': '√≥', '√É¬∫': '√∫',
            '√É': '√Å', '√É‚Ä∞': '√â', '√É': '√ç', '√É"': '√ì', '√É≈°': '√ö',
            
            // E√±e
            '√É¬±': '√±', '√É'': '√ë',
            
            // Di√©resis
            '√É¬º': '√º', '√É≈ì': '√ú',
            
            // Otros caracteres especiales comunes
            '√Ç¬ø': '¬ø', '√Ç¬°': '¬°',
            '√Ç¬∞': '¬∞', '√Ç¬™': '¬™', '√Ç¬∫': '¬∫',
            
            // Patrones espec√≠ficos encontrados
            'N mero': 'N√∫mero',
            'n mero': 'n√∫mero',
            'tecnol gico': 'tecnol√≥gico',
            'Tecnol gico': 'Tecnol√≥gico',
            'beneficiados': 'beneficiados', // Ya est√° bien, pero por si acaso
            
            // M√°s patrones comunes
            'Educaci n': 'Educaci√≥n',
            'educaci n': 'educaci√≥n',
            'Poblaci n': 'Poblaci√≥n',
            'poblaci n': 'poblaci√≥n',
            'Informaci n': 'Informaci√≥n',
            'informaci n': 'informaci√≥n',
            'Direcci n': 'Direcci√≥n',
            'direcci n': 'direcci√≥n',
            'Atenci n': 'Atenci√≥n',
            'atenci n': 'atenci√≥n',
            'Prevenci n': 'Prevenci√≥n',
            'prevenci n': 'prevenci√≥n'
        };

        let fixedText = text;

        // Aplicar reemplazos directos
        Object.keys(encodingMap).forEach(badChar => {
            if (typeof encodingMap[badChar] === 'string') {
                fixedText = fixedText.split(badChar).join(encodingMap[badChar]);
            }
        });

        // Patr√≥n especial para   seguido de caracteres
        fixedText = fixedText.replace(/ ([a-zA-Z])/g, (match, letter) => {
            const commonReplacements = {
                'n': '√±', 'N': '√ë',
                'a': '√°', 'A': '√Å',
                'e': '√©', 'E': '√â',
                'i': '√≠', 'I': '√ç',
                'o': '√≥', 'O': '√ì',
                'u': '√∫', 'U': '√ö'
            };
            return commonReplacements[letter] || letter;
        });

        // Limpiar otros caracteres problem√°ticos
        fixedText = fixedText
            .replace(/√¢‚Ç¨‚Ñ¢/g, "'")  // Ap√≥strofe
            .replace(/√¢‚Ç¨≈ì/g, '"')  // Comilla izquierda
            .replace(/√¢‚Ç¨/g, '"')   // Comilla derecha
            .replace(/√¢‚Ç¨"/g, '‚Äì')  // Gui√≥n en dash
            .replace(/√¢‚Ç¨"/g, '‚Äî')  // Gui√≥n em dash
            .replace(/√Ç/g, '')     // Caracteres √Ç sueltos
            .replace(/ /g, '');    // Caracteres   que no se pudieron corregir

        return fixedText;
    }

    static getIndicatorName(indicator) {
        let name = indicator.Nombre_Indicador || 
                   indicator.Indicador || 
                   indicator.N || 
                   CONFIG.FALLBACK_VALUES.indicatorName;
        
        // Aplicar correcci√≥n de codificaci√≥n al nombre
        return this.fixEncoding(name);
    }
}

// Hacer disponible globalmente
window.CSVParser = CSVParser;